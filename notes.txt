

waypoint start, end;
waypoint list;  // waypoint table 1 to max 255
waypoint obstacle;  // waypoint table 1 to max 255


coordonne current_heading
coordonne target_heading

sailing_state = 'normal'  # sailing state can be 'normal','switch_to_port_tack' or  'switch_to_stbd_tack'


wind_direction
wind_direction_apparent
wind_angle_target

attack_angle

struct tack
        int decision_sample;
        int decision_threshold

fonction 
        tack_voting





       

        pid_control

        wave_estimation




https://github.com/Maritime-Robotics-Student-Society/sailing-robot/blob/master/src/sailing_robot/scripts/simulation_heading
        Ay = -0.25    # -1/4 of the size of the boat [m]
        r = 0.05      # radius of the rudder [m]
        By = Ay*2
        Cx = - r*math.sin(math.radians(self.rudder))
        Cy = By - r*math.cos(math.radians(self.rudder))

        d = self.speed/self.freq

        y = d
        x = (-(-Cx**2-Cy**2+Ay*Cy+math.sqrt(Cx**4+Cy**4-2*Ay*Cy**3+Ay**2*Cy**2+2*Cx**2*Cy**2-4*Cx**2*d**2-2*Ay*Cx**2*Cy+4*Ay*Cx**2*d))/(2*Cx))
        #x=(-(-Cx**2-Cy**2+Ay*Cy-(math.sqrt(Cx**4+Cy**4-2*Ay*Cy**3+Ay**2*Cy**2+2*Cx**2*Cy**2-4*Cx**2*d**2-2*Ay*Cx**2*Cy+4*Ay*Cx**2*d)))/(2*Cx))

        return -math.degrees(math.atan2(y,x)) + 90





https://github.com/Maritime-Robotics-Student-Society/sailing-robot/blob/master/src/sailing_robot/scripts/simulation_wind_apparent
        # velocity in the boat reference system
        self.velocity = (msg.speed * math.cos(math.radians(msg.heading - self.heading)),
                         msg.speed * math.sin(math.radians(msg.heading - self.heading)))


            wind_direction_boat = (self.wind_direction_north + noise_direction - self.heading) % 360
            wind_vector_boat = ((self.wind_speed + noise_speed)* math.cos(math.radians(wind_direction_boat )),
                                - (self.wind_speed + noise_speed)* math.sin(math.radians(wind_direction_boat)),)

            wind_apparent = (self.velocity[0] + wind_vector_boat[0],
                             self.velocity[1] + wind_vector_boat[1],) 


            wind_speed_apparent = math.sqrt(wind_apparent[0]**2 + wind_apparent[1]**2)
            wind_direction_apparent = ( math.degrees(- math.atan2(wind_apparent[1], wind_apparent[0]))) % 360
